// Emmett Woytovich
// Final 

///Object globals
String names[]=  { "Alpha", "Beta", "Gamma", "Delta", "Epsilon" };
String bnames[]= { "Enterprise", "Optimus Prime", "Bupkis", "Lusitania" };
int ss= names.length;
int bs= bnames.length;
Squid school[]=  new Squid[ss];
Boat fleet[]= new Boat[bs];

Lobster ecw[] = new Lobster[5];
///Misc Globals
boolean but; //is the button pressed?
float xMost,yMost, xLeast,yLeast; //Lobster hi/lo
float spacing;
float surface;
float sunX=0, sunY=100;
int score=0;
int counter;

//// SETUP
void setup() {
  frameRate(30); //consistant Lobster animations
  size( 1234, 765 );
  spacing=  width/(ss+1);
  reset();
}

void reset() {
  surface=  random(  height/3, height/2 );
  sunY=  surface/3;
  counter = 0;
  but = false;
  //many squids.
  float x=  spacing;
  for (int i=0; i<ss; i++ ) {
    school[i]=  new Squid( names[i], x );
    x += spacing;
  }
  //many boats
  for (int k=0; k<bs; k++ ) {
    fleet[k]=  new Boat( bnames[k] );  
  }
  //many Lobsters
  for (int c=0; c<ecw.length; c++ ) {
    ecw[c]=  new Lobster();
  }

}


//// NEXT FRAME:  scene, action
void draw() {
  counter++;//animation counter
  if(counter > 1000){ counter=0;}
  
  scene();
  
  if (mousePressed) {
    boatReport( 50, fleet, fleet.length );
    lobsterReoprt( surface-50, ecw, ecw.length );
    fishReport( surface+50, school, school.length);
  }
  else action();
  show();
  messages();
  cc();//Lobster collisions
}
void cc(){
  float temp;
  for(int i=0; i<ecw.length; i++){
    for(int k=0; k<ss; k++){
      if(ecw[i].hit(school[k].x,school[k].y)){
          school[k].bottom();
      }
    }
  }
  
}
void messages() {
  fill(0);
  textSize( 20 );
  text( "Final Project", width/3, 20 );
  textSize(12);
  text("to sort boats   x:B dx:D cargo:F", 10,15);
  text("to sort squid   x:X y:Y dy:S legs:L", 10,30);
  text("Highest & Lowest Lobster Button\nOr press $", width-200,15);
  text( "Click to show all boats, squids and lobsters", width/3, 40 );
  text( "ECW:  final-ecw.java", 10, height-10 );
  if (but || key == '$') { //button display
    bpress();
  }
  if (score>0) text( "SCORE:  "+score, width*3/4, 20 );
  if (score>900) {
    if (key == 'q') score=0;
    text( "Maximum score.\nQUITTING NOW\nPress the 'q' key to continue", width/2, 60 );
    if (score>10000) { exit(); }
  }
}

//// METHODS TO MOVE & DRAW.
void scene() {
  background( 250,90,20 );      // sky.
  // sun
  if (sunX > width+100) {
    sunX=  -100;
    sunY=  random( 100, surface+50 );
  }
  sunX += 1;
  fill( 255,250,50 );
  ellipse( sunX, sunY-150*sin( PI * sunX/width ), 40,40 );
  // opaque water
  fill( 20,90,240,200);
  noStroke();
  rect( 0,surface, width, height-surface );  
  float loop = surface+(height/10);//triangle loop
  while( loop < height-(height/10)){
    tri(loop,width);
    loop += height/10;
  }
  button();
}
void tri(float y,float x){
  fill(250,0,0); strokeWeight(1);
  triangle(x,y+15, x,y-15, x-15,y);
}
void button(){//show button
  fill(100,0,0); rect(width-50,20, 30,30);
}
void bpress(){//calculates higest and lowest Lobsters & displays them
    yLeast = ecw[0].y;
    yMost = ecw[0].y;
    for(int c=0;c<ecw.length;c++){
      if(ecw[c].y <= yMost){ xMost = ecw[c].x; yMost = ecw[c].y; }
    }
    for(int z=0;z<ecw.length;z++){
      if(ecw[z].y >= yLeast){ xLeast = ecw[z].x; yLeast = ecw[z].y; }
    }
    text("High X: " + xMost + " High Y: " + yMost +"\nLow X: " + xLeast +" Low Y: " + yLeast , width-250,100);
}
void action() {
  // Move squids & boats & Lobsters.
  for (int i=0; i<ss; i++ ) {
    school[i].move();
  }
  for (int k=0; k<bs; k++ ) {
    fleet[k].move();
  }
  for (int c=0; c<ecw.length; c++ ) {
    ecw[c].move();
  }
}
//// Display 
void show() {
  float x=  spacing;
  for (int i=0; i<ss; i++ ) {
    school[i].x=  x;
    x += spacing;
    school[i].show();
  }
  for (int k=0; k<bs; k++ ) {
    fleet[k].show();
  }
  for (int c=0; c<ecw.length; c++ ) {
    ecw[c].show();
  }
}

//// SUMMARIES:  List all objects in each array.
// Display the properties of each object in the array.
void boatReport( float top, Boat[] b, int ss ) {
  fill(255,200,200);
  rect( 50,top, width-100, 50 + 20*ss );
  float x=70, y=top+20;
  // Labels.
  fill(150,0,0);
  text( "BOAT",  x+20, y );
  text( "cargo", x+70, y );
  text( "x",     x+105, y );
  text( "dx",    x+205, y );
  ///////////////////////////////////////
  fill(0);
  for (int k=0; k<bs; k++) {
    y += 15;    // Next line.
    text( k, x, y );
    text( b[k].name, x+20, y );
    text( b[k].cargo, x+70, y );
    text( b[k].x, x+100, y );
    text( b[k].dx, x+200, y );
    
  }
  
} 
void lobsterReoprt( float top, Lobster[] c, int cs ) {
  fill(255,200,255);
  rect( 50,top, width-100, 50 + 20*cs );
  float x=70, y=top+20;
  // Labels.
  fill(150,0,0);
  text( "x",  x+20, y );
  text( "y",  x+105, y );
  text( "dx", x+205, y );
  text( "dy", x+305, y );
  ///////////////////////////////////////
  fill(0);
  for (int j=0; j<cs; j++) {
    y += 15;    // Next line.
    text( j, x, y );
    text( c[j].x, x+20, y );
    text( c[j].y, x+100, y );
    text( c[j].dx, x+200, y );
    text( c[j].dy, x+300, y );
    
  }
  
} 

void fishReport( float top, Squid[] a, int ss ) {
  fill(255,255,200);
  rect( 50,top, width-100, 50 + 20*ss );
  float x=70, y=top+20;
  // Labels.
  fill(150,0,0);
  text( "FISH", x+20, y );
  text( "legs", x+70, y );
  text( "x", x+105, y );
  text( "y", x+205, y );
  text( "dy", x+305, y );
  ///////////////////////////////////
  fill(0);
  for (int i=0; i<ss; i++) {
    y += 15;    // Next line.
    text( i, x, y );
    text( a[i].name, x+20, y );
    text( a[i].legs, x+70, y );
    text( a[i].x, x+100, y );
    text( a[i].y, x+200, y );
    text( a[i].dy, x+300, y );
  }
}
    

//// EVENT HANDLERS:  keys, clicks ////
void keyPressed() {
  if( key == 'B'){bsX(fleet) ;bsX(fleet);bsX(fleet);}
  if( key == 'D'){bsDX(fleet);bsDX(fleet);bsDX(fleet);}    //boat sorts, multiple times for insurance
  if( key == 'F'){bsC(fleet); bsC(fleet);bsC(fleet);}
  
  if( key == 'X'){ssX(school); ssX(school); ssX(school);}
  if( key == 'Y'){ssY(school); ssY(school); ssY(school);}  //squid sorts, multiple times for insurance
  if( key == 'S'){ssDY(school);ssDY(school);ssDY(school);}
  if( key == 'L'){ssL(school); ssL(school); ssL(school);}
  ////////////////////////////////////////////////
  if (key == 'r') reset();
  // Send a squid to the bottom!
  if (key == '0') school[0].bottom(); 
  if (key == '1') school[1].bottom(); 
  if (key == '2') school[2].bottom(); 
  if (key == '3') school[3].bottom(); 
  //// Send highest to bottom.
  if (key == 'h') {
    int k=0;
    for (int i=1; i<ss; i++ ) {
      if (school[i].y < school[k].y) k=i;           // k is index of highert.
    }
    school[k].bottom();     
  }
  // Cheat codes:
  //// Send all to top or bottom.
  if (key == 'b') {
    for (int k=0; k<ss; k++ ) {
      school[k].bottom();     
    }
  }
  if (key == 't') {
    for (int k=0; k<ss; k++ ) {
      school[k].y=  surface+10;
      school[k].dy=  -0.1  ;
    }
  }
}
void mousePressed(){//button hit detection
  if(mouseX > width-50 && mouseX < width-20 && mouseY > 20 && mouseY < 50){
    if(but == true){but=false;}
     else{but =true;}
  }
}

///// OBJECTS /////

class Lobster {
  float x,y, dx,dy;
  int dir,animate;
  //CONSTRUCTORS
 
  Lobster() { 
    y=random(surface,height);  
    dx = random(0,5);
    dy = random(-5,5);
    
  }
  //METHODS
  void show() {
    fill(250,20,0);
    ellipse( x,y, 50,30 );
    strokeWeight(5); stroke(250,0,0);
    if(counter/5%2 != 0){
      line(x+7-(dir*14),y-13, x+40-(80*dir),y-13);
      line(x+7-(dir*14),y+13, x+40-(80*dir),y+13);
    }
    else{
      line(x+7-(dir*14),y-13, x+40-(80*dir),y);
      line(x+7-(dir*14),y+13, x+40-(80*dir),y);
    }
    strokeWeight(1);
    
  }
  void move() {
    if (x>=width)     {dx= -dx; x = width;}
    if (x<=0)         {dx= -dx; x = 0;}
    if (y>=height)    {dy= -dy; y = height;}
    if (y<=surface)   {dy= -dy; y = surface;}
    x += dx; 
    y += dy; 
    if(dx > 0){dir = 0;}
    else      {dir = 1;}
  }
 
  boolean hit( float xOther, float yOther ) {
    if (  dist( xOther,yOther, x,y ) <= 30 ) return true;
    else return false;
  }
}
 
class Squid {
  float x,y;        // Coordinates
  float dx=0,dy=0;  // Speed
  float w=40,h=40;
  int legs=10;      // Number of legs.
  String name="";
  float r,g,b;      // Color.
  int count=0;
  //// CONSTRUCTORS ////
  Squid( String s, float x ) {
    this.name=  s;
    this.x=x;
    bottom();
    // Purplish
    r=  random(100, 255);
    g=  random(0, 100);
    b=  random(100, 250);
  }
  //// Start again at bottom.  (Random speed.)
  void bottom() {
    y=  height - h;
    dy=  -random( 0.1, 0.9 );
    legs=  int( random(1, 10.9) );
  }
  //// METHODS:  move & show ////
  void move() {
    x += dx;
    y += dy;
    if (y>height) { 
      bottom();
      count++;
    }
    else if (y<surface) { 
      dy=  -3 * dy;        // Descend fast!
    }
  }
  //// Display the creature.
  void show() {
    fill(r,g,b);
    stroke(r,g,b);
    ellipse( x,y, w,h );         // round top
    rect( x-w/2,y, w,h/2 );      // flat bottom
    fill(255);
    float blink=10;
    if ( y%100 > 80) blink=2;
    ellipse( x,y-h/4, 10, blink );     // eye
    // Legs
    fill(r,g,b);                 // legs.
    float legX=  x-w/2, foot=0;
    foot=  dy>=0 ? 0 : (y%47 > 23) ? 5 : -5;
    strokeWeight(3);
    for (int i=0; i<legs; i++) {
      line( legX, y+h/2, legX+foot, 20+y+h/2 );
      legX += w / (legs-1);
    }
      strokeWeight(3);
    fill(200,200,0);
    text( name, x-w/2, y-10+h/2 );
    fill(0);
    text( legs, x+2-w/2, y+h/2 );
    fill(255);
    if (count>0) text( count, x, y+h/2 );
  }
  //// Return true if near
  boolean hit( float xx, float yy ) {
    return dist( xx,yy, x,y ) < h;
  }
}


class Boat {
  String name="";
  float x=0, y=surface, dx=random(1,5);
  int cargo=0, caught=0;
  void move() {
    //// Fish before move:  check each squid.
    int caught=0;
    for (int i=0; i<ss; i++ ) {
      if (school[i].hit( this.x, surface )) {
        caught += school[i].legs;
      }
    }
    cargo += caught;    
    //// Now, move the boat.
    x += dx;
    if (caught>0) x += 2*dx;      //  Jump after catch.
    if (x<0) {
      score += cargo;            // Add cargo to global score.
      cargo=0;
      dx = random( 1, 5 );      // Variable boat speed.
    }
    if (x>width)  {
      dx = -random( 0.5, 3 );    // Slower return.
    }
  }
  Boat( String s ) {
    this.name=  s;
  }
  //// Draw the boat.
  void show() {
    // Boat.
    fill(255,0,0);
    noStroke();
    rect( x, surface-20, 50, 20 );
    if (dx>0)   triangle( x+50,surface, x+50,surface-20, x+70,surface-20 );
    else        triangle( x,surface, x,surface-20, x-20,surface-20 );
    rect( x+12, surface-30, 25, 10 );      // Cabin.
    fill(0);
    rect( x+20, surface-40, 10, 10 );      // Smokestack.
    // Display name & cargo.
    fill(255);
    text( name, x+5, surface-10 );
    fill(0);
    if (cargo>0) text( cargo, x+20, surface );
    // Smoke
    fill( 50,50,50, 200 );
    ellipse( x +20 -10*dx, surface-50, 20, 20 );
    ellipse( x +20 -20*dx, surface-60, 15, 10 );
    ellipse( x +20 -30*dx, surface-70, 8, 5 );
  }    
}

/////////////////////////////////////////////////BOAT SORTS
void bsX(Boat[] f){//boat sort by x
  Boat temp = new Boat("");  
    for(int i = 0; i < fleet.length; i++){
        int t = i;
        
        for(int k = i; k < fleet.length;k++){
          if(fleet[k].x < fleet[i].x){t=k;}
        }
        
        temp.x=fleet[i].x;     temp.dx=fleet[i].dx;     temp.name=fleet[i].name;     temp.caught=fleet[i].caught;     temp.cargo=fleet[i].cargo;
        fleet[i].x=fleet[t].x; fleet[i].dx=fleet[t].dx; fleet[i].name=fleet[t].name; fleet[i].caught=fleet[t].caught; fleet[i].cargo=fleet[t].cargo;
        fleet[t].x=temp.x;     fleet[t].dx=temp.dx;     fleet[t].name=temp.name;     fleet[t].caught=temp.caught;     fleet[t].cargo=temp.cargo;
  }
}
void bsDX(Boat[] f){//boat sort by dx
  Boat temp = new Boat("");  
    for(int i = 0; i < fleet.length; i++){
        int t = i;
        
        for(int k = i; k < fleet.length;k++){
          if(fleet[k].dx < fleet[i].dx){t=k;}
        }
        
        temp.x=fleet[i].x;     temp.dx=fleet[i].dx;     temp.name=fleet[i].name;     temp.caught=fleet[i].caught;     temp.cargo=fleet[i].cargo;
        fleet[i].x=fleet[t].x; fleet[i].dx=fleet[t].dx; fleet[i].name=fleet[t].name; fleet[i].caught=fleet[t].caught; fleet[i].cargo=fleet[t].cargo;
        fleet[t].x=temp.x;     fleet[t].dx=temp.dx;     fleet[t].name=temp.name;     fleet[t].caught=temp.caught;     fleet[t].cargo=temp.cargo;
  }
}
void bsC(Boat[] f){//boat sort by cargo
  Boat temp = new Boat("");  
    for(int i = 0; i < fleet.length; i++){
        int t = i;
        
        for(int k = i; k < fleet.length;k++){
          if(fleet[k].cargo < fleet[i].cargo){t=k;}
        }
        
        temp.x=fleet[i].x;     temp.dx=fleet[i].dx;     temp.name=fleet[i].name;     temp.caught=fleet[i].caught;     temp.cargo=fleet[i].cargo;
        fleet[i].x=fleet[t].x; fleet[i].dx=fleet[t].dx; fleet[i].name=fleet[t].name; fleet[i].caught=fleet[t].caught; fleet[i].cargo=fleet[t].cargo;
        fleet[t].x=temp.x;     fleet[t].dx=temp.dx;     fleet[t].name=temp.name;     fleet[t].caught=temp.caught;     fleet[t].cargo=temp.cargo;
  }
}



/////////////////////////////////////////////////////////////SQUID SORTS

void ssX(Squid[] s){//squid sort by x
  Squid temp = new Squid("",0);  
    for(int i = 0; i < school.length; i++){
        int t = i;
        
        for(int k = i; k < school.length;k++){
          if(school[k].x < school[i].x){t=k;}
        }
        
        temp.x=school[i].x;      temp.y=school[i].y;      temp.name=school[i].name;      temp.dy=school[i].dy;      temp.legs=school[i].legs;
        school[i].x=school[t].x; school[i].y=school[t].y; school[i].name=school[t].name; school[i].dy=school[t].dy; school[i].legs=school[t].legs;
        school[t].x=temp.x;      school[t].y=temp.y;      school[t].name=temp.name;      school[t].dy=temp.dy;      school[t].legs=temp.legs;
  }
}
void ssY(Squid[] s){//squid sort by y
  Squid temp = new Squid("",0);  
    for(int i = 0; i < school.length; i++){
        int t = i;
        
        for(int k = i; k < school.length;k++){
          if(school[k].y < school[i].y){t=k;}
        }
        
        temp.x=school[i].x;      temp.y=school[i].y;      temp.name=school[i].name;      temp.dy=school[i].dy;      temp.legs=school[i].legs;
        school[i].x=school[t].x; school[i].y=school[t].y; school[i].name=school[t].name; school[i].dy=school[t].dy; school[i].legs=school[t].legs;
        school[t].x=temp.x;      school[t].y=temp.y;      school[t].name=temp.name;      school[t].dy=temp.dy;      school[t].legs=temp.legs;
  }
}
void ssDY(Squid[] s){//squid sort by dy
  Squid temp = new Squid("",0);  
    for(int i = 0; i < school.length; i++){
        int t = i;
        
        for(int k = i; k < school.length;k++){
          if(school[k].dy < school[i].dy){t=k;}
        }
        
        temp.x=school[i].x;      temp.y=school[i].y;      temp.name=school[i].name;      temp.dy=school[i].dy;      temp.legs=school[i].legs;
        school[i].x=school[t].x; school[i].y=school[t].y; school[i].name=school[t].name; school[i].dy=school[t].dy; school[i].legs=school[t].legs;
        school[t].x=temp.x;      school[t].y=temp.y;      school[t].name=temp.name;      school[t].dy=temp.dy;      school[t].legs=temp.legs;
  }
}
void ssL(Squid[] s){//squid sort by legs
  Squid temp = new Squid("",0);  
    for(int i = 0; i < school.length; i++){
        int t = i;
        
        for(int k = i; k < school.length;k++){
          if(school[k].legs < school[i].legs){t=k;}
        }
        
        temp.x=school[i].x;      temp.y=school[i].y;      temp.name=school[i].name;      temp.dy=school[i].dy;      temp.legs=school[i].legs;
        school[i].x=school[t].x; school[i].y=school[t].y; school[i].name=school[t].name; school[i].dy=school[t].dy; school[i].legs=school[t].legs;
        school[t].x=temp.x;      school[t].y=temp.y;      school[t].name=temp.name;      school[t].dy=temp.dy;      school[t].legs=temp.legs;
  }
}
